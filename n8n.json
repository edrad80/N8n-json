{
  "name": "My workflow 7 WIP copy",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "533888f0-b4b8-4b4f-be22-fb500d695a72",
        "options": {}
      },
      "id": "a7837b10-32f1-482a-83eb-871f4324d62d",
      "name": "WooCommerce Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1792,
        0
      ],
      "webhookId": "533888f0-b4b8-4b4f-be22-fb500d695a72"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "5aa5de96-301a-43be-8491-36002b1ca3ea",
      "name": "Extract Order Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [
        -1568,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Debug: Log the extracted order data\nconst orderData = $node['Extract Order Data'].json;\nconsole.log('=== ORDER DATA DEBUG ===');\nconsole.log('Order ID:', orderData.orderId);\nconsole.log('Order Number:', orderData.orderNumber);\nconsole.log('Products:', JSON.stringify(orderData.products, null, 2));\nconsole.log('Products count:', orderData.products ? orderData.products.length : 0);\n// Initialize variables for pagination\nreturn [{\n  json: {\n    eposProducts: [],\n    currentPage: 1,\n    hasMorePages: true, // Start the loop\n    totalProducts: 0,\n    orderData: orderData\n  }\n}];"
      },
      "id": "483d9cd2-bbbb-4327-8596-2fa758c83e5f",
      "name": "Initialize State",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1360,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Debug: Log the API request details\nconsole.log('=== API REQUEST DEBUG ===');\nconsole.log('Current page:', $json.currentPage);\n// Note: The actual URL used by Fetch EposNow Products does NOT include per_page=200\n// as adding it breaks the API call.\nconsole.log('API URL will be: https://api.eposnowhq.com/api/v4/Product/WebProducts?page=' + $json.currentPage /* + '&per_page=200' */);\nreturn [$input.all()[0]];"
      },
      "id": "21f806b6-94cd-404c-8c26-10eb8fdf86b9",
      "name": "Debug API Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1136,
        -128
      ]
    },
    {
      "parameters": {
        "url": "=https://api.eposnowhq.com/api/v4/Product/WebProducts?page={{ $json.currentPage }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "5ee3cdc6-e50a-4e2a-82e9-41ab2918d136",
      "name": "Fetch EposNow Products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1184,
        320
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "Cqh8nJJyHpWCBAdg",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Debug: Log the API response\nconst apiResponse = $input.all()[0].json;\nconsole.log('=== API RESPONSE DEBUG ===');\nconsole.log('Full API Response:', JSON.stringify(apiResponse, null, 2));\n\n// Get the persisted state from a previous node (HTTP node does not forward input)\nlet currentState = {};\ntry { currentState = $node['Update State'].json || {}; } catch (e) {\n  try { currentState = $node['Initialize State'].json || {}; } catch (e2) { currentState = {}; }\n}\n\n// Extract products from API response - handle different response structures\nlet newProducts = [];\n// Check if the response is a single product object (has Id field)\nif (apiResponse && apiResponse.Id && typeof apiResponse.Id === 'number') {\n  console.log('Response is a single product object');\n  newProducts = [apiResponse];\n} \n// Check if response is an array of products\nelse if (Array.isArray(apiResponse)) {\n  console.log('Response is an array of products');\n  newProducts = apiResponse;\n} \n// Check if response has a data array\nelse if (apiResponse.data && Array.isArray(apiResponse.data)) {\n  console.log('Response has data array');\n  newProducts = apiResponse.data;\n} \n// Check for other possible array containers\nelse if (apiResponse.products && Array.isArray(apiResponse.products)) {\n  newProducts = apiResponse.products;\n} else if (apiResponse.items && Array.isArray(apiResponse.items)) {\n  newProducts = apiResponse.items;\n}\n\nconsole.log('Extracted products count:', newProducts.length);\nif (newProducts.length > 0) {\n  console.log('First product sample:', JSON.stringify(newProducts[0], null, 2));\n}\n\n// Combine with existing products\nlet allProducts = currentState.eposProducts || [];\nallProducts = allProducts.concat(newProducts);\n\n// --- FIXED PAGINATION LOGIC ---\n// Handle pagination - EposNow API v4 WebProducts does not provide pagination metadata in the response.\n// When called without per_page, it returns only 1 product per page based on testing.\n// Therefore, we must assume there are more pages unless the current page returns 0 items.\n// This will lead to an extra, final request that returns 0 items, which will correctly stop the loop.\nconst currentPage = currentState.currentPage || 1; // Use the state value passed in\nconst lastPage = 'unknown'; // Cannot determine from response\n// Continue only if we received a full page (200 items). Stop when fewer than 200 are returned.\nlet hasMorePages = (newProducts.length === 200);\n\n// Optional Safety Check (Uncomment and adjust if needed):\n// const maxPages = 50000; // Adjust based on known product count\n// if (currentPage >= maxPages) {\n//   console.log(`Reached maximum page limit (${maxPages}), stopping to prevent infinite loop.`);\n//   hasMorePages = false;\n// }\n// --- END FIXED PAGINATION LOGIC ---\n\nconsole.log(`Fetched page ${currentPage} of ${lastPage || 'unknown'}`);\nconsole.log(`Products on this page: ${newProducts.length}`);\nconsole.log(`Total products collected: ${allProducts.length}`);\nconsole.log(`Has more pages: ${hasMorePages}`);\n\nreturn [{\n  json: {\n    eposProducts: allProducts,\n    // Pass the NEXT page number for the subsequent request\n    currentPage: currentPage + 1,\n    hasMorePages: hasMorePages,\n    totalProducts: allProducts.length,\n    totalPages: lastPage || 'unknown',\n    orderData: currentState.orderData || {}\n  }\n}];"
      },
      "id": "2e68aafb-f48b-4eb2-855f-6aaf56d9341d",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -928,
        -96
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.hasMorePages }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "299d4109-39b7-4cfe-81d9-29458afbd012",
      "name": "Has More Pages?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -720,
        -224
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "55d7aa57-a051-4e36-a107-a7f2ae81b7b2",
      "name": "Update State",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.1,
      "position": [
        -480,
        -112
      ]
    },
    {
      "parameters": {
        "jsCode": "// All products have been fetched, now match with WooCommerce products\nconst allEposProducts = $json.eposProducts || [];\nconst orderData = $json.orderData || {};\nconst orderProducts = orderData.products || [];\nconsole.log('=== MATCHING DEBUG ===');\nconsole.log(`Total EposNow products fetched: ${allEposProducts.length}`);\nconsole.log(`Order products to match: ${orderProducts.length}`);\nif (allEposProducts.length > 0) {\n  console.log('Sample EposNow product:', JSON.stringify(allEposProducts[0], null, 2));\n}\nif (orderProducts.length > 0) {\n  console.log('Sample order product:', JSON.stringify(orderProducts[0], null, 2));\n}\n// Create matches array\nconst matches = [];\nconst unmatched = [];\nfor (const orderProduct of orderProducts) {\n  const sku = orderProduct.sku;\n  const quantityOrdered = orderProduct.quantity;\n  console.log(`Processing order product: ${orderProduct.name}, SKU: ${sku}, Qty: ${quantityOrdered}`);\n  if (!sku || sku.trim() === '') {\n    console.log(`Skipping product without SKU: ${orderProduct.name}`);\n    unmatched.push({\n      reason: 'No SKU',\n      name: orderProduct.name,\n      quantity: quantityOrdered\n    });\n    continue;\n  }\n  // Find matching EposNow product by SKU (try multiple fields)\n  const eposProduct = allEposProducts.find(product => {\n    const productSku = product.sku || product.SKU || '';\n    const productBarcode = product.barcode || product.Barcode || '';\n    const productCode = product.product_code || product.ProductCode || product.code || '';\n    const productReference = product.reference || product.Reference || '';\n    const match = productSku.toLowerCase() === sku.toLowerCase() || \n           productBarcode.toLowerCase() === sku.toLowerCase() ||\n           productCode.toLowerCase() === sku.toLowerCase() ||\n           productReference.toLowerCase() === sku.toLowerCase();\n    if (match) {\n      console.log(`Found match for SKU ${sku} with EposNow product:`, product.name || product.Name);\n    }\n    return match;\n  });\n  if (eposProduct) {\n    const currentStock = parseInt(eposProduct.stock_level || eposProduct.StockLevel || eposProduct.stock || 0) || 0;\n    const newStockLevel = Math.max(0, currentStock - quantityOrdered);\n    matches.push({\n      woocommerce_sku: sku,\n      woocommerce_product_name: orderProduct.name,\n      woocommerce_quantity: quantityOrdered,\n      eposnow_product_id: eposProduct.id || eposProduct.Id || eposProduct.ID,\n      eposnow_product_name: eposProduct.name || eposProduct.Name || eposProduct.description,\n      eposnow_current_stock: currentStock,\n      new_stock_level: newStockLevel,\n      stock_reduction: quantityOrdered\n    });\n    console.log(`✓ Matched SKU '${sku}' -> EposNow Product ID ${eposProduct.id || eposProduct.Id}`);\n  } else {\n    unmatched.push({\n      reason: 'Not found in EposNow',\n      sku: sku,\n      name: orderProduct.name,\n      quantity: quantityOrdered\n    });\n    console.log(`✗ No EposNow product found for SKU: ${sku}`);\n  }\n}\nconsole.log(`Successfully matched: ${matches.length} products`);\nconsole.log(`Failed to match: ${unmatched.length} products`);\nif (unmatched.length > 0) {\n  console.log('Unmatched products:', JSON.stringify(unmatched, null, 2));\n}\n// Return matches for processing (each as separate item)\nif (matches.length === 0) {\n  return [{\n    json: {\n      error: \"No matching products found\",\n      unmatched: unmatched,\n      total_order_products: orderProducts.length,\n      total_epos_products: allEposProducts.length,\n      debug: {\n        orderData: orderData,\n        sampleEposProduct: allEposProducts[0] || null\n      }\n    }\n  }];\n}\nreturn matches.map(match => ({ json: match }));"
      },
      "id": "067a8a9d-ff8e-4ad4-9985-352ca630f9e4",
      "name": "Match Products by SKU",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -688,
        208
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "WooCommerce Webhook": {
      "main": [
        [
          {
            "node": "Extract Order Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Order Data": {
      "main": [
        [
          {
            "node": "Initialize State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize State": {
      "main": [
        [
          {
            "node": "Debug API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug API Request": {
      "main": [
        [
          {
            "node": "Fetch EposNow Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch EposNow Products": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Has More Pages?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has More Pages?": {
      "main": [
        [
          {
            "node": "Update State",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Match Products by SKU",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update State": {
      "main": [
        [
          {
            "node": "Fetch EposNow Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "849c6441-adb8-4bf2-b6eb-b2315a498533",
  "meta": {
    "instanceId": "c01c7505886d403093023cdf3f867c5c7d1ddd56bbcb91f78d44406dbb0328b9"
  },
  "id": "BYSNh0hoPwbpl7kg",
  "tags": [
    {
      "createdAt": "2025-08-06T04:47:31.195Z",
      "updatedAt": "2025-08-06T04:47:31.195Z",
      "id": "47YI2QQOcDJ61cZt",
      "name": "woocommerce"
    },
    {
      "createdAt": "2025-08-06T04:47:31.168Z",
      "updatedAt": "2025-08-06T04:47:31.168Z",
      "id": "EIsosJ9Ek3Cb0y7L",
      "name": "eposnow"
    },
    {
      "createdAt": "2025-08-06T04:47:31.182Z",
      "updatedAt": "2025-08-06T04:47:31.182Z",
      "id": "qY2U0EPW908nUWuf",
      "name": "inventory-sync"
    }
  ]
}
